---
title: "CFD 12 steps"
description: "Implementation of Barba Lorena's 12 Steps to Navier-Stokes in Julia"
categories: CFD
jupyter: julia-1.10
draft: true
---
## Finite difference method

The finite difference method approximates derivatives on numerical grid.

Definitions of exact derivative can be left, center, or right

$$
\frac{df}{dx} = \lim_{\Delta x -> 0} \frac{f(x+\Delta x) - f(x)}{\Delta x}
$$

In finite difference method, lim is not done.

$$
\frac{df}{dx}^{forward} \approx \frac{f(x+dx)-f(x)}{dx}
$$

$$
\frac{df}{dx}^{centered} \approx \frac{f(x+dx)-f(x-dx)}{2 dx}
$$

$$
\frac{df}{dx}^{backward} \approx \frac{f(x)-f(x-dx)}{dx}
$$

But how good is this approximation?

Taylor series of $f(x)$:

$$
f(x + \Delta x) = f(x) + \frac{1}{1!} \partial_x f \Delta x + \frac{1}{2!} \partial_x^2 f \Delta x^2 + \ldots  = \sum_{n=0}^{\infty} \frac{1}{n!} \partial_x^n f \Delta x^n 
$$

Can use this to see how good finite difference approximation is:

$$
\frac{f(x+\Delta x) - f(x) }{\Delta x} = \partial_x f + \frac{1}{2!}\partial_x^2 f \Delta x + \ldots  = \partial_x f + O(\Delta x)
$$

So the forward finite difference approximation is accurate to first order of $\Delta x$.

The centered finite difference approximation is accurate to second order.

How can we derive finite difference approximations for higher derivatives?

Can use finite difference approximation of the finite difference
approximations for f'.

$$
\partial_x^2 f(x) \approx \frac{f(x+\Delta x) - 2f(x) + f(x-\Delta x)}{\Delta x^2}
$$

    
A more elegant way to derive finite difference operators uses the
Taylor series expansion:

$$
f(x+dx) = f(x) + f'(x)dx + \frac{1}{2!}f''(x) dx^2 + \ldots
$$

$$
f(x) = f(x)
$$

$$
f(x-dx) = f(x) - f'(x)dx + \frac{1}{2!}f''(x)dx^2 + \ldots
$$

Then solve for the expression one wants.  This can be done by
multiplying the equations by $a$, $b$, $c$, respectively, and
summing them up.

$$
af(x+dx) + bf(x) +cf(x-dx) \approx (a+b+c)f(x) + (a-c)f'(x)dx + 1/2(a+c)f''(x)dx^2
$$

We choose coefficients such that the right hand-side is the
expression we are solving for.

We want to solve the right-handside for f'(x). So we need

$$
\begin{pmatrix} 1 & 1 & 1 \\ 1 & 0 & -1 \\ 1 & 0 & 1 \end{pmatrix}
\begin{pmatrix} a \\ b\\ c\end{pmatrix} =
\begin{pmatrix} 0 \\ 1/dx \\ 0 \end{pmatrix}
$$

The solution is $a = 1/2dx$, $b = 0$, $c = -1/2dx$.


 

Therefore, we obtain

$$
f'(x) = \frac{f(x+dx) - f(x-dx)}{2dx}
$$


Solving for $f''(x)$ we find

$$
f''(x) = \frac{f(x-dx)-2f(x)+f(x+dx)}{dx^2}
$$
    

How can we get approximations of higher order (accuracy)?

Instead of only using $f(x-dx)$ and $f(x+dx)$, we also use $f(x-2dx)$ and
$f(x+2dx)$.

$$
f(x+2dx) = f(x) + f'(x)2dx + \frac{1}{2!}f''(x) (2dx)^2 + \frac{1}{3!}f'''(x)(2dx)^3 + \frac{1}{4!}f''''(x)(2dx)^4 + \ldots
$$

$$
f(x+dx) = f(x) + f'(x)dx + \frac{1}{2!}f''(x) dx^2 + \frac{1}{3!}f'''(x)dx^3 + \frac{1}{4!}f''''(x)dx^4 + \ldots
$$

$$
f(x) = f(x)
$$

$$
f(x-dx) = f(x) - f'(x)dx + \frac{1}{2!}f''(x) dx^2 - \frac{1}{3!}f'''(x)dx^3 + \frac{1}{4!}f''''(x)dx^4 + \ldots
$$

$$
f(x-2dx) = f(x) - f'(x)2dx + \frac{1}{2!}f''(x) (2dx)^2 - \frac{1}{3!}f'''(x)(2dx)^3 + \frac{1}{4!}f''''(x)(2dx)^4 + \ldots
$$

Now we have 5 coefficients $a$, $b$, $c$, $d$, $e$. In order to get
a solvable system we need to use Taylor expansion up to fourth
derivative/order in dx.

This results in the following expression for the second derivative:

$$
f''(x) \approx \frac{-1/12 f(x-2dx) + 4/3 f(x-dx) -5/2 f(x) + 4/3 f(x+dx) -1/12 f(x+2dx)}{dx^2}
$$

How can we compute the central finite difference operators/stencils computationally?

Write the left hand side in general as

$$
\alpha_p f(x+p*dx)
$$ 

So the sum over left hand side for all equations becomes

$$
\sum_{i=-p}^p \alpha_i f(x + i * dx)
$$

So the $\alpha_i$ define our stencil. 
    
The sum over right hand side of equations is written in such a way
that we accumulate the coefficients for each derivative

$$
\sum_{i=-p}^p \alpha_i f(x)
$$

$$
\sum_{i=-p}^p i\alpha_i f'(x)dx
$$

$$
\sum_{i=-p}^p i^2 \alpha_i f''(x)dx^2/2!
$$

$$
\sum_{i=-p}^p i^3 \alpha_i f'''(x) dx^3/3!
$$


see https://en.wikipedia.org/wiki/Finite_difference_coefficient
see https://findiff.readthedocs.io/en/latest/source/theory.html
  

## Step 1: 1D linear convection

$$ 
 \frac{\partial u}{\partial t} + c \frac{\partial u}{\partial x} = 0 
$$

Here $u$ is any physical quantity. For an initial profile

$$
u(x, t = 0) = u_0(x)
$$

the solution of the PDE is

$$
u(x, t) = u_0(x - ct)
$$

The solution is a simple shift of the initial profile by $ct$. Can, therefore, also be seen as wave propagation.


Discretize to

$$ 
\frac{u_i^{n+1}-u_i^n}{\Delta t} + c \frac{u_i^n - u_{i-1}^n}{\Delta x} = 0 
$$

$$ 
u_i^{n+1} = u_i^n - c \frac{\Delta t}{\Delta x}(u_i^n-u_{i-1}^n) 
$$

 
As initial profile we choose a square wave

$$
u_0(x) = \begin{cases}
\begin{matrix}
2 & 0.5 \le x \le 1 \cr
1 & \text{otherwise}
\end{matrix}
\end{cases}
$$


```{julia}
  using Plots

  nx = 41

  function simulate1(; nx = 41, add = false)

      dx = 2 / (nx - 1)
      nt = 25
      dt = 0.025
      c = 1

      x = collect(1:nx) * dx
      u = ones(Float64, nx)
      u[ 0.5 .<= x .<= 1] .= 2

      if ~add
	      plot(range(0.0, 2.0; length = nx), u;
	      label = "initial", title = "1D linear convection")
      end

      un = zeros(Float64, nx)

      for n in 1:nt
	      un = u[:]
	      for i in 2:(nx-1)
	        u[i] = un[i] - c * dt / dx * (un[i] - un[i-1])
	      end
      end

      plot!(range(0, 2; length = nx), u, label = "nx = $nx")

  end

  simulate1(nx = 41)
  simulate1(;nx = 81, add = true)
  simulate1(;nx = 85, add = true) # starts to oscillate
```


For $n_x=81$ we get the solution we expect from the physics, i.e. a simple shift of the initial profile. But for $n_x=41$ we observe diffusion and for $n_x=85$ we observe oscillations. So how do we know how to choose $n_x$?


## Step 2: Non-linear convection 1D

$$ 
\frac{\partial u}{\partial t} + u \frac{\partial u}{\partial x} = 0 
$$

Now $u$ is the velocity, and the non-linear term appears because of the material derivative. The interesting thing is that this PDE can create discontinuous solutions from continuous initial conditions, i.e. "shocks".

Discretize:

$$ 
\frac{u_i^{n+1}-u_i^n}{\Delta t} + u_i^n \frac{u_i^n-u_{i-1}^n}{\Delta x} = 0 
$$

$$ 
u_i^{n+1} = u_i^n - u_i^n \frac{\Delta t}{\Delta x} (u_i^n - u_{i-1}^n) 
$$

```{julia}
  using Plots

  function simulate2(; nx = 41, add = false)
      dx = 2 / (nx - 1)
      nt = 20
      dt = 0.025


      u = ones(Float64, nx)
      x = range(0, 2; step = dx)
      u[0.5 .<= x .<= 1] .= 2

      if ~add
	      plot(range(0.0, 2.0; length = nx), u;
	       label = "initial",
	       title = "1D non-linear convection")
      end

      un = zeros(Float64, nx)

      for n in 1:nt
	      un = u[:]
	      for i in 2:(nx-1)
	        u[i] = un[i] - un[i]* dt/dx * (un[i] - un[i-1])
	      end
      end

      plot!(range(0, 2; length = nx), u, label = "nx = $nx")

  end

  simulate2()
  simulate2(; nx = 21, add = true)
  simulate2(; nx = 42, add = true) # explodes
```



## Step 2b: CFL criterion

We are recomputing the position of the wave at time steps $\Delta t$.
When the wave is travelling a distance larger than $\Delta x$ during
this time interval, instabiities occur.

When changing the number of grid points $n_x$ and, therefore, the grid
spacing $\Delta x$ , we have to make sure that the distance travelled
by the wave $u \Delta t$ is less than the grid spacing $\Delta x$.
This is the so-called CFL.

$$ 
\sigma = \frac{u \Delta t}{\Delta x} \le \sigma_{max} 
$$


```{julia}
  using Plots

  function simulate1b(; nx = 41, add = false)

      dx = 2 / (nx - 1)
      c = 1
      sigma = 0.5
      dt = sigma * dx
      nt = round(Int, 25 * 0.025 / dt)

      u = ones(Float64, nx)
      x = range(0, 2; step = dx)
      u[ 0.5 .<= x .<= 1] .= 2

      if ~add
	      plot(range(0.0, 2.0; length = nx), u;
	       label = "initial", title = "1D linear convection, CFL = 0.5")
      end

      un = zeros(Float64, nx)

      for n in 1:nt
	      un = u[:]
	      for i in 2:(nx-1)
	        u[i] = un[i] - c * dt / dx * (un[i] - un[i-1])
	      end
      end

      plot!(range(0, 2; length = nx), u, label = "nx = $nx")

  end

  simulate1b(nx = 41)
  simulate1b(;nx = 81, add = true)
  simulate1b(;nx = 121, add = true)
  simulate1b(;nx = 1001, add = true)
```



## Step 3: 1D diffusion equation

$$ 
\frac{\partial u}{\partial t}= \nu \frac{\partial^2 u}{\partial x^2} 
$$

For $u=T$, this correpsonds to the heat equation.

Exact solutions exist if $\nu = const.$.

Ansatz: 
$$
u(x,t) = \tilde{u} e^{i(kx-\omega t)}
$$

yields

$$
i\omega = \nu k^2
$$

and

$$
u(x,t) = \tilde{u}e^{ikx}e^{-\nu k^2 t}
$$

i.e. wave with exponential damping in time.

As physics of diffusion is isotropic, the appropriate finite difference scheme is central difference (CD).

Discretize using central difference scheme

$$ 
\frac{\partial ^2 u}{\partial x^2}=\frac{u_{i+1}-2u_{i}+u_{i-1}}{\Delta x^2} + O(\Delta x^2) 
$$

$$ 
\frac{u_{i}^{n+1}-u_{i}^{n}}{\Delta t}=\nu\frac{u_{i+1}^{n}-2u_{i}^{n}+u_{i-1}^{n}}{\Delta x^2} 
$$

$$ 
u_{i}^{n+1}=u_{i}^{n}+\frac{\nu\Delta t}{\Delta x^2}(u_{i+1}^{n}-2u_{i}^{n}+u_{i-1}^{n}) 
$$



```{julia}
  using Plots

  function simulate3(; nx = 41, add = false)

      dx = 2 / (nx - 1)
      nu = 0.3
      sigma = 0.2
      dt = sigma * dx^2 / nu
      nt = round(Int, 0.05 / dt)

      u = ones(Float64, nx)
      x = range(0, 2; step = dx)
      u[ 0.5 .<= x .<= 1] .= 2

      if ~add
	      plot(range(0.0, 2.0; length = nx), u;
	       label = "initial", title = "1D diffusion equation, CFL = 0.2")
      end

      un = zeros(Float64, nx)

      for n in 1:nt
	      un = u[:]
	      for i in 2:(nx-1)
	        u[i] = un[i] + nu * dt / dx^2 * (un[i+1] - 2*un[i] + un[i-1])
	      end
      end

      plot!(range(0, 2; length = nx), u, label = "nx = $nx")

  end

  simulate3()
  simulate3(;nx = 81, add = true)
  simulate3(;nx = 1001, add = true)
```



## Step 4: 1D Burgers' equation

$$ 
\frac{\partial u}{\partial t} + u \frac{\partial u}{\partial x} = \nu \frac{\partial ^2u}{\partial x^2} 
$$

Discretization

$$ 
\frac{u_i^{n+1}-u_i^n}{\Delta t} + u_i^n \frac{u_i^n - u_{i-1}^n}{\Delta x} = \nu \frac{u_{i+1}^n - 2u_i^n + u_{i-1}^n}{\Delta x^2} 
$$

$$ 
u_i^{n+1} = u_i^n - u_i^n \frac{\Delta t}{\Delta x} (u_i^n - u_{i-1}^n) + \nu \frac{\Delta t}{\Delta x^2}(u_{i+1}^n - 2u_i^n + u_{i-1}^n) 
$$


Using initial condition

$$ 
\begin{align*}
   u &= -\frac{2 \nu}{\phi} \frac{\partial \phi}{\partial x} + 4 \
  \phi &= \exp \bigg(\frac{-x^2}{4 \nu} \bigg) + \exp \bigg(\frac{-(x-2 \pi)^2}{4 \nu} \bigg)
  \end{align*} 
$$

can get analytical solution

$$ 
\begin{align*}
u &= -\frac{2 \nu}{\phi} \frac{\partial \phi}{\partial x} + 4 \
\phi &= \exp \bigg(\frac{-(x-4t)^2}{4 \nu (t+1)} \bigg) + \exp \bigg(\frac{-(x-4t -2 \pi)^2}{4 \nu(t+1)} \bigg)
\end{align*} 
$$


  

```{julia}
  using Plots
  
  ufunc(t, x, nu) = -2*nu*(-(-8*t + 2*x)*exp(-(-4*t + x)^2/(4*nu*(t + 1)))/(4*nu*(t + 1)) - (-8*t + 2*x - 4*pi)*exp(-(-4*t + x - 2*pi)^2/(4*nu*(t + 1)))/(4*nu*(t + 1)))/(exp(-(-4*t + x - 2*pi)^2/(4*nu*(t + 1))) + exp(-(-4*t + x)^2/(4*nu*(t + 1)))) + 4
  
  ufunc(1,4,3)
  
  function simulate4(;nx = 101, add = false)
      nt = 100
      dx = 2pi/(nx-1)
      nu = 0.07
      dt = dx * nu
  
      x = range(0, 2pi; length = nx)
      un = zeros(Float64, nx)
  
      t = 0.0
      u = [ufunc(t, x0, nu) for x0 in x]
  
      if ~add
	      plot(x, u, label = "initial")
      end
  
      for n in 1:nt
	      un = u[:]
	      # periodic boundary conditions
	      # u[1] = u[nx]
	      # compute those separately
	      for i in 2:(nx-1)
	        u[i] = un[i] - un[i] * dt/dx*(un[i] - un[i-1]) + nu*dt/dx^2 * (un[i+1] - 2*un[i] + un[i-1])
	      end
	      # NOTE: u[1] = u[nx]
	      # so u[0] corresponds to u[nx-1]
	      u[1] = un[1] - un[1] * dt/dx*(un[1] - un[nx-1]) + nu*dt/dx^2 * (un[2] - 2*un[1] + un[nx-1])
	      u[nx] = u[1]
      end
  
      ua = [ufunc(nt*dt, xi, nu) for xi in x]
  
      plot!(x, u, label="nx = $nx")
      plot!(x, ua, label = "nx=$nx analytical")
  
  end
  
  simulate4()
  simulate4(;nx = 301, add = true)
```

## Step 5: 2D linear convection

$$
 \frac{\partial u}{\partial t}+c\frac{\partial u}{\partial x} + c\frac{\partial u}{\partial y} = 0 
$$

Discretization


$$ 
\frac{u_{i,j}^{n+1}-u_{i,j}^n}{\Delta t} + c\frac{u_{i, j}^n-u_{i-1,j}^n}{\Delta x} + c\frac{u_{i,j}^n-u_{i,j-1}^n}{\Delta y}=0 
$$

$$ 
u_{i,j}^{n+1} = u_{i,j}^n-c \frac{\Delta t}{\Delta x}(u_{i,j}^n-u_{i-1,j}^n)-c \frac{\Delta t}{\Delta y}(u_{i,j}^n-u_{i,j-1}^n) 
$$

Initial conditions

$$ 
u(x,y) = \begin{cases}
\begin{matrix}
2\ \text{for} & 0.5 \leq x, y \leq 1 \cr
1\ \text{for} & \text{everywhere else}\end{matrix}\end{cases} 
$$

Boundary conditions

$$
u = 1\ \text{for } \begin{cases}
\begin{matrix}
x =  0,\ 2 \cr
y =  0,\ 2 \end{matrix}\end{cases} 
$$

```{julia}
  using Plots

  function simulate5(; nx = 81, ny = 81, sigma = 0.2)

      nt = 100
      dx = 2 / (nx - 1)
      dy = 2 / (ny - 1)
      c = 1.0
      dt = sigma * dx

      x = range(0.0, 2.0; length = nx)
      y = range(0.0, 2.0; length = ny)

      u = ones(Float64, (nx, ny))

      # initial conditions
      u[round(Int, 0.5/dx + 1):round(Int, 1.0/dx + 1),
	round(Int, 0.5/dy + 1):round(Int, 1.0/dy + 1)] .= 2.0

      for n in 1:nt
	  un = u[:,:]
	  u[2:(nx-1), 2:(ny-1)] .= un[2:(nx-1), 2:(ny-1)] .-
	      c*dt/dx*(un[2:(nx-1), 2:(ny-1)] .- un[1:(nx-2), 2:(ny-1)]) .-
	      c*dt/dy*(un[2:(nx-1), 2:(ny-1)] .- un[2:(nx-1), 1:(ny-2)])

	  u[1,:] .= 1.0
	  u[nx,:] .= 1.0
	  u[:, 1] .= 1.0
	  u[:, ny] .= 1.0
      end

      x, y, u
  end

  x, y, u = simulate5()

  plots = [wireframe(x, y, u), contour(x, y, u)]
  plot(plots..., layout = (1,2))

```


## Step 6: 2D (non-linear) convection

$$ 
\frac{\partial u}{\partial t} + u \frac{\partial u}{\partial x} + v \frac{\partial u}{\partial y} = 0
$$

$$
\frac{\partial v}{\partial t} + u \frac{\partial v}{\partial x} + v \frac{\partial v}{\partial y} = 0
$$

Discretization

$$
\frac{u_{i,j}^{n+1}-u_{i,j}^n}{\Delta t} + u_{i,j}^n \frac{u_{i,j}^n-u_{i-1,j}^n}{\Delta x} + v_{i,j}^n \frac{u_{i,j}^n-u_{i,j-1}^n}{\Delta y} = 0
$$

$$
\frac{v_{i,j}^{n+1}-v_{i,j}^n}{\Delta t} + u_{i,j}^n \frac{v_{i,j}^n-v_{i-1,j}^n}{\Delta x} + v_{i,j}^n \frac{v_{i,j}^n-v_{i,j-1}^n}{\Delta y} = 0
$$

$$
u_{i,j}^{n+1} = u_{i,j}^n - u_{i,j} \frac{\Delta t}{\Delta x} (u_{i,j}^n-u_{i-1,j}^n) - v_{i,j}^n \frac{\Delta t}{\Delta y} (u_{i,j}^n-u_{i,j-1}^n)
$$

$$
v_{i,j}^{n+1} = v_{i,j}^n - u_{i,j} \frac{\Delta t}{\Delta x} (v_{i,j}^n-v_{i-1,j}^n) - v_{i,j}^n \frac{\Delta t}{\Delta y} (v_{i,j}^n-v_{i,j-1}^n)
$$

Initial conditions:

$$
 u,\ v\ = \begin{cases}\begin{matrix}
2 & \text{for } x,y \in (0.5, 1)\times(0.5,1) \cr
1 & \text{everywhere else}
\end{matrix}\end{cases} 
$$

Boundary conditions:

$$
u = 1,\ v = 1 \text{ for } 
\begin{cases} 
\begin{matrix}
x=0,2 \cr 
y=0,2 
\end{matrix}
\end{cases}
$$

