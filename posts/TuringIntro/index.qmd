---
title: "Introduction to Turing.jl"
description: "A quick introduction to probabilistic programming language Turing.jl"
format: 
  html: 
    toc: true
    number-sections: true
jupyter: julia-1.10
draft: true
---

Turing.jl is a probabilistic proramming language that let's us define a generative model and does inference.

## Coin example

Let's flip a biased coin a hundred times.

```{julia}
using Turing
using DataFrames
coin_flips = rand(Bernoulli(0.7), 100);
```

In order to do inference, we need to specify a model.

 $$ p \sim Beta(1,1) $$

 $$ coin flip \sim Bernoulli(p) $$


```{julia}
@model function coin(data)
  p ~ Beta(1,1)
  for i in eachindex(data) 
    data[i] ~ Bernoulli(p)
  end
end
```


### Sample from prior

```{julia}
prior = sample(coin(coin_flips), Prior(), 1000)
```

```{julia}
summarystats(prior)
```

```{julia}
DataFrame(prior) 
```


### Sample from posterior

```{julia}
posterior = sample(coin(coin_flips), NUTS(), 1000)
```


```{julia}
summarystats(prior)
```

```{julia}
DataFrame(posterior)
```


### Prior predictive check

Here we pass in a vector containing `missing`. Sampling then generates observations.

```{julia}
observations = Vector{Missing}(missing, length(coin_flips))
prior_check = predict(coin(observations), prior)
```

`prior_check` is a `Chains` instance. To convert to an `Array`, use 

```{julia}
Array(prior_check, [:parameters])
```

### Posterior predictive check

```{julia}
observations = Vector{Missing}(missing, length(coin_flips))
posterior_check = predict(coin(observations), posterior)
```

### Chains

The results of sampling runs are `MCMCChains.Chains` instances.

A `Chains` instance has the following fields:

- value: `AxisArray` object `:iter` x `:var` x `:chain`
- logevidence
- name_map (to define sections, NamedTuple section -> names, default section is `:parameters`)
- info

```{julia}
value = rand(500, 2, 3)
chn = Chains(value, [:a, :b])
chn2 = Chains(value, ["A[1]", "A[2]"])
```


One can restrict the output (an `AxisArray`) to some parameters by using `chn[:a]`, for example.
To get a `Chains` instance with only parameter a, do `chn[[:a]]`. Weird!



An `AxisArray` has fields `:axes` and `:data`. It has advanced indexing.
I.e. to get only a slice of a dimension `:dim`, one can use `A[dim = idx]`,
so in the case of a MCMC sample, we might use `chn.value[var = :a]`, or `chn.value[chain = 2]`

`summarystats(chn; sections = :parameters)`

`quantile(chn; sections = :parameters)`

or `describe(chn; sections = :parameters)` to get both at once 


Turings `sample` returns a `Chains` instance with sections `:parameters` and `:internals`.

```{julia}
posterior.name_map
```

To convert a chain to a DataFrame containing the `:parameters` section only, one can do

```{julia}
DataFrame(posterior[posterior.name_map.parameters])

# or DataFrame(MCMCchains.get_sections(posterior, :parameters))
```
